{"kind": "Listing", "data": {"modhash": "", "dist": 26, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create one top-level comment for **meta** discussion.\n* *New!* I will create another top-level comment for **individuals looking for work**. (This is an experiment; if successful, it will be continued.)\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddit.com/wiki/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [Who's Hiring C++ Devs - Q4 2018](https://www.reddit.com/r/cpp/comments/9kig88/whos_hiring_c_devs_q4_2018/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q1 2019", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_abh8bm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 165, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 165, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1546338793.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create one top-level comment for &lt;strong&gt;meta&lt;/strong&gt; discussion.&lt;/li&gt;\n&lt;li&gt;&lt;em&gt;New!&lt;/em&gt; I will create another top-level comment for &lt;strong&gt;individuals looking for work&lt;/strong&gt;. (This is an experiment; if successful, it will be continued.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddit.com/wiki/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/9kig88/whos_hiring_c_devs_q4_2018/\"&gt;Who&amp;#39;s Hiring C++ Devs - Q4 2018&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "visited": false, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "abh8bm", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "num_crossposts": 0, "num_comments": 121, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/abh8bm/c_jobs_q1_2019/", "whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/abh8bm/c_jobs_q1_2019/", "subreddit_subscribers": 81948, "created_utc": 1546338793.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_do2ok", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Forward-declaring STL container types", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6kov5", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 22, "domain": "blog.magnum.graphics", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 22, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553789370.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6kov5", "is_robot_indexable": true, "report_reasons": null, "author": "czmosra", "num_crossposts": 0, "num_comments": 5, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6kov5/forwarddeclaring_stl_container_types/", "whitelist_status": "all_ads", "stickied": false, "url": "https://blog.magnum.graphics/backstage/forward-declaring-stl-container-types/", "subreddit_subscribers": 81948, "created_utc": 1553789370.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_496so", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New CLion release (2019.1) bringing Embedded Development, Language Injections, ClangFormat integration, Memory View, Custom Themes and more...", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": true, "name": "t3_b6llmw", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "domain": "blog.jetbrains.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553793734.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6llmw", "is_robot_indexable": true, "report_reasons": null, "author": "philsquared", "num_crossposts": 0, "num_comments": 3, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6llmw/new_clion_release_20191_bringing_embedded/", "whitelist_status": "all_ads", "stickied": false, "url": "https://blog.jetbrains.com/clion/2019/03/clion-2019-1-embedded-dev-clangformat-memory-view/", "subreddit_subscribers": 81948, "created_utc": 1553793734.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_mz5a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Machine code layout optimizations | Denis Bakhvalov", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": true, "name": "t3_b6m8uh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "domain": "dendibakh.github.io", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553796909.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6m8uh", "is_robot_indexable": true, "report_reasons": null, "author": "corysama", "num_crossposts": 0, "num_comments": 0, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6m8uh/machine_code_layout_optimizations_denis_bakhvalov/", "whitelist_status": "all_ads", "stickied": false, "url": "https://dendibakh.github.io/blog/2019/03/27/Machine-code-layout-optimizatoins", "subreddit_subscribers": 81948, "created_utc": 1553796909.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_jxx65", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The space of design choices for std::function", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6afjw", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 63, "domain": "quuxplusone.github.io", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 63, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553723924.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6afjw", "is_robot_indexable": true, "report_reasons": null, "author": "d1ngal1ng", "num_crossposts": 0, "num_comments": 13, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6afjw/the_space_of_design_choices_for_stdfunction/", "whitelist_status": "all_ads", "stickied": false, "url": "https://quuxplusone.github.io/blog/2019/03/27/design-space-for-std-function/", "subreddit_subscribers": 81948, "created_utc": 1553723924.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Hi all!\n\nAnybody know how the commitee decide what should be a keyword or an identifiers with special meaning?\n\nIs there any written or not 'guideline/rule/principle' to make this kind of decision?\n\nLet me clarify why it is interesting: I investigate possiblity of proposing to change state of a few current keywords to 'identifiers with special meaning'.\n\nFor example 'delete' is a very usual word and using it in some case as a 'normal' identifier would be beneficial. Like as a type name/alias...\n\nThank you", "author_fullname": "t2_fg841", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Keywords vs identifiers with special meaning", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6huaz", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553773990.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all!&lt;/p&gt;\n\n&lt;p&gt;Anybody know how the commitee decide what should be a keyword or an identifiers with special meaning?&lt;/p&gt;\n\n&lt;p&gt;Is there any written or not &amp;#39;guideline/rule/principle&amp;#39; to make this kind of decision?&lt;/p&gt;\n\n&lt;p&gt;Let me clarify why it is interesting: I investigate possiblity of proposing to change state of a few current keywords to &amp;#39;identifiers with special meaning&amp;#39;.&lt;/p&gt;\n\n&lt;p&gt;For example &amp;#39;delete&amp;#39; is a very usual word and using it in some case as a &amp;#39;normal&amp;#39; identifier would be beneficial. Like as a type name/alias...&lt;/p&gt;\n\n&lt;p&gt;Thank you&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6huaz", "is_robot_indexable": true, "report_reasons": null, "author": "malacszor", "num_crossposts": 0, "num_comments": 10, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6huaz/keywords_vs_identifiers_with_special_meaning/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b6huaz/keywords_vs_identifiers_with_special_meaning/", "subreddit_subscribers": 81948, "created_utc": 1553773990.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_jxx65", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "SIMD Extension to C++ OpenMP in Visual Studio | C++ Team Blog", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6afwk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "domain": "devblogs.microsoft.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 45, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553723976.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6afwk", "is_robot_indexable": true, "report_reasons": null, "author": "d1ngal1ng", "num_crossposts": 0, "num_comments": 15, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6afwk/simd_extension_to_c_openmp_in_visual_studio_c/", "whitelist_status": "all_ads", "stickied": false, "url": "https://devblogs.microsoft.com/cppblog/simd-extension-to-c-openmp-in-visual-studio/", "subreddit_subscribers": 81948, "created_utc": 1553723976.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_3dcwniyz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Introduction into an Automated C++ Build Setup with Jenkins and CMake", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b669np", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 93, "domain": "thoughts-on-cpp.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 93, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553703987.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b669np", "is_robot_indexable": true, "report_reasons": null, "author": "bmahr", "num_crossposts": 0, "num_comments": 18, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b669np/introduction_into_an_automated_c_build_setup_with/", "whitelist_status": "all_ads", "stickied": false, "url": "https://thoughts-on-cpp.com/2019/03/27/introduction-into-build-automation-setup-with-jenkins-and-cmake", "subreddit_subscribers": 81948, "created_utc": 1553703987.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "[https://gitlab.com/chriscox/CppPerformanceBenchmarks](https://gitlab.com/chriscox/CppPerformanceBenchmarks)\n\n&amp;#x200B;\n\n&amp;#x200B;\n\nmemcpy.cpp\n\nHow well is the platform memcpy optimized? And how does the compiler recognize and optimize memcpy loops?\n\nThere is room for improvement here, for all compilers and OSes tested.\n\n&amp;#x200B;\n\nsimple\\_types\\_copy\\_propagation.cpp\n\nTake a look at how well compilers are doing simple copy propagation.\n\nSome compilers are doing OK, and some are really hurting.\n\n&amp;#x200B;\n\nsimple\\_types\\_cse.cpp\n\nTest how compilers apply common sub-expression elimination, which also ends up testing algebraic reduction and auto-vectorization.\n\nI expected every compiler to pass this test, and they all let me down in a big way.\n\nAttempting to debug the open source compilers failures on this test lead to more profanity than a Deadpool script read by Samuel L Jackson.\n\n&amp;#x200B;\n\nsimple\\_types\\_value\\_range.cpp\n\nSee how value ranges are propagated and applied to calculations, branching, and other optimizations.\n\nAll compilers tested have lots of room for improvement.\n\n&amp;#x200B;\n\nAdded repeated constant tests to simple\\_types\\_algebraic\\_simplification.cpp\n\nThe new tests (that reduce to zero) are similar to more complicated tests in simple\\_types\\_cse.\n\n&amp;#x200B;\n\nAdded lambda tests to functionobjects.cpp\n\nAdded lambda comparisons, reorganized and abstracted some of the test code.\n\n&amp;#x200B;\n\nCleaned up and extended inner\\_product.cpp\n\nAdded more unrolling, summation to different types, etc.\n\n&amp;#x200B;\n\nCleaned up minmax.cpp a bit\n\nRemoved unsafe comparisons, added types, abstracted code.\n\n&amp;#x200B;\n\nCleaned up benchmark\\_algorithms.h\n\nPreparing for future tests.", "author_fullname": "t2_1yteq0kn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Performance Benchmarks Release 11", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6c0wu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553732482.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://gitlab.com/chriscox/CppPerformanceBenchmarks\"&gt;https://gitlab.com/chriscox/CppPerformanceBenchmarks&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;memcpy.cpp&lt;/p&gt;\n\n&lt;p&gt;How well is the platform memcpy optimized? And how does the compiler recognize and optimize memcpy loops?&lt;/p&gt;\n\n&lt;p&gt;There is room for improvement here, for all compilers and OSes tested.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;simple_types_copy_propagation.cpp&lt;/p&gt;\n\n&lt;p&gt;Take a look at how well compilers are doing simple copy propagation.&lt;/p&gt;\n\n&lt;p&gt;Some compilers are doing OK, and some are really hurting.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;simple_types_cse.cpp&lt;/p&gt;\n\n&lt;p&gt;Test how compilers apply common sub-expression elimination, which also ends up testing algebraic reduction and auto-vectorization.&lt;/p&gt;\n\n&lt;p&gt;I expected every compiler to pass this test, and they all let me down in a big way.&lt;/p&gt;\n\n&lt;p&gt;Attempting to debug the open source compilers failures on this test lead to more profanity than a Deadpool script read by Samuel L Jackson.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;simple_types_value_range.cpp&lt;/p&gt;\n\n&lt;p&gt;See how value ranges are propagated and applied to calculations, branching, and other optimizations.&lt;/p&gt;\n\n&lt;p&gt;All compilers tested have lots of room for improvement.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Added repeated constant tests to simple_types_algebraic_simplification.cpp&lt;/p&gt;\n\n&lt;p&gt;The new tests (that reduce to zero) are similar to more complicated tests in simple_types_cse.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Added lambda tests to functionobjects.cpp&lt;/p&gt;\n\n&lt;p&gt;Added lambda comparisons, reorganized and abstracted some of the test code.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Cleaned up and extended inner_product.cpp&lt;/p&gt;\n\n&lt;p&gt;Added more unrolling, summation to different types, etc.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Cleaned up minmax.cpp a bit&lt;/p&gt;\n\n&lt;p&gt;Removed unsafe comparisons, added types, abstracted code.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Cleaned up benchmark_algorithms.h&lt;/p&gt;\n\n&lt;p&gt;Preparing for future tests.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6c0wu", "is_robot_indexable": true, "report_reasons": null, "author": "chriscoxart", "num_crossposts": 0, "num_comments": 8, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6c0wu/c_performance_benchmarks_release_11/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b6c0wu/c_performance_benchmarks_release_11/", "subreddit_subscribers": 81948, "created_utc": 1553732482.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "[json_dto](https://bitbucket.org/sobjectizerteam/json_dto-0.2) is a small and easy to use wrapper around RapidJSON intended to simplification of (de)serialization of C++ struct/classes from/to JSON. Since the [last announce](https://www.reddit.com/r/cpp/comments/968lv9/json_dto026_an_update_for_easy_to_use_wrapper/) two new features were added to json_dto.\n\nIt is possible now to deserialize a data-transfer-object (DTO) from an already parsed document. For example:\n\n    struct update_period {\n    \t...\n    \ttemplate&lt;typename Json_Io&gt; void json_io(Json_Io &amp; io) {...}\n    };\n    struct read_sensor {\n    \t...\n    \ttemplate&lt;typename Json_Io&gt; void json_io(Json_Io &amp; io) {...}\n    };\n    ...\n    void parse_and_handle_message( const std::string &amp; raw_msg )\n    {\n    \trapidjson::Document whole_msg;\n    \twhole_msg.Parse&lt; rapidjson::kParseDefaultFlags &gt;( raw_msg );\n    \tif( whole_msg.HasParseError() )\n    \t\tthrow std::runtime_error(\n    \t\t\t\tstd::string{ \"unable to parse message: \" } +\n    \t\t\t\trapidjson::GetParseError_En( whole_msg.GetParseError() ) );\n    \n    \tconst std::string msg_type = whole_msg[ \"message_type\" ].GetString();\n    \tconst auto &amp; payload = whole_msg[ \"payload\" ];\n    \tif( \"Update-Period\" == msg_type )\n    \t{\n    \t\tauto dto = json_dto::from_json&lt; update_period &gt;( payload );\n    \t\t...\n    \t}\n    \telse if( \"Read-Sensor\" == msg_type )\n    \t{\n    \t\tauto dto = json_dto::from_json&lt; read_sensor &gt;( payload );\n    \t\t...\n    \t}\n    \telse\n    \t\t...\n    }\n\nThe support for STL containers like `std::deque`, `std::list`, `std::forward_list`, `std::set`, `std::unordered_set`, `std::map`, `std::unordered_map` was added.\n\nThese containers can be used as types of fields of DTO:\n\n    #include &lt;json_dto/pub.hpp&gt;\n    \n    #include &lt;deque&gt;\n    #include &lt;set&gt;\n    #include &lt;map&gt;\n    \n    struct my_message {\n    \tstd::deque&lt;int&gt; ids_;\n    \tstd::set&lt;std::string&gt; tags_;\n    \tstd::map&lt;std::string, some_another_type&gt; props_;\n    \t...\n    \ttemplate&lt;typename Json_Io&gt;\n    \tvoid json_io(Json_Io &amp; io) {\n    \t\tio &amp; json_dto::mandatory(\"ids\", ids_)\n    \t\t\t&amp; json_dto::mandatory(\"tags\", tags_)\n    \t\t\t&amp; json_dto::mandatory(\"properties\", props_)\n    \t\t\t...\n    \t\t\t;\n    \t}\n    };   \n\nAlso, these containers are supported by json_dto::from_json() and json_dto::to_json() functions:\n\n    auto messages = json_dto::from_json&lt; std::forward_list&lt;my_message&gt; &gt;(...);\n    ...\n    auto json = json_dto::to_json(messages);\n\nNote. Containers like `std::multiset`, `std::unordered_multiset`, `std::multimap`, `std::unordered_multimap` are also supported. But json_dto doesn't control duplicated values/keys. We rely on RapidJSON behavior here.\n\n`std::array` is not supported yet. It's because we see several approaches to deal with a different number of values in JSON-input and not decided yet what approach is the best. So if you want to have the support for `std::array` in json_dto please open [an issue](https://bitbucket.org/sobjectizerteam/json_dto-0.2/issues) and we'll discuss it.\n\nThe main repo of json_dto is on [BitBucket](https://bitbucket.org/sobjectizerteam/json_dto-0.2). But there is also [a GitHub-mirror](https://github.com/Stiffstream/json_dto).\n\nPS. Just a few words about the comparison with famous nlohmann::json library. If you don't use RapidJSON and just want to handle JSON in your C++ code then you can simply get nlohmann::json and use it. But if you already have RapidJSON in your project and want to simplify your work with complex C++ structs/classes... Or if you want to use RapidJSON because of its speed then json_dto can help you.", "author_fullname": "t2_jla0u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "json_dto-0.2.8: an update for easy to use wrapper around RapidJSON", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6f9lf", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "thumbnail": "", "edited": 1553758357.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553753781.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://bitbucket.org/sobjectizerteam/json_dto-0.2\"&gt;json_dto&lt;/a&gt; is a small and easy to use wrapper around RapidJSON intended to simplification of (de)serialization of C++ struct/classes from/to JSON. Since the &lt;a href=\"https://www.reddit.com/r/cpp/comments/968lv9/json_dto026_an_update_for_easy_to_use_wrapper/\"&gt;last announce&lt;/a&gt; two new features were added to json_dto.&lt;/p&gt;\n\n&lt;p&gt;It is possible now to deserialize a data-transfer-object (DTO) from an already parsed document. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;struct update_period {\n    ...\n    template&amp;lt;typename Json_Io&amp;gt; void json_io(Json_Io &amp;amp; io) {...}\n};\nstruct read_sensor {\n    ...\n    template&amp;lt;typename Json_Io&amp;gt; void json_io(Json_Io &amp;amp; io) {...}\n};\n...\nvoid parse_and_handle_message( const std::string &amp;amp; raw_msg )\n{\n    rapidjson::Document whole_msg;\n    whole_msg.Parse&amp;lt; rapidjson::kParseDefaultFlags &amp;gt;( raw_msg );\n    if( whole_msg.HasParseError() )\n        throw std::runtime_error(\n                std::string{ &amp;quot;unable to parse message: &amp;quot; } +\n                rapidjson::GetParseError_En( whole_msg.GetParseError() ) );\n\n    const std::string msg_type = whole_msg[ &amp;quot;message_type&amp;quot; ].GetString();\n    const auto &amp;amp; payload = whole_msg[ &amp;quot;payload&amp;quot; ];\n    if( &amp;quot;Update-Period&amp;quot; == msg_type )\n    {\n        auto dto = json_dto::from_json&amp;lt; update_period &amp;gt;( payload );\n        ...\n    }\n    else if( &amp;quot;Read-Sensor&amp;quot; == msg_type )\n    {\n        auto dto = json_dto::from_json&amp;lt; read_sensor &amp;gt;( payload );\n        ...\n    }\n    else\n        ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The support for STL containers like &lt;code&gt;std::deque&lt;/code&gt;, &lt;code&gt;std::list&lt;/code&gt;, &lt;code&gt;std::forward_list&lt;/code&gt;, &lt;code&gt;std::set&lt;/code&gt;, &lt;code&gt;std::unordered_set&lt;/code&gt;, &lt;code&gt;std::map&lt;/code&gt;, &lt;code&gt;std::unordered_map&lt;/code&gt; was added.&lt;/p&gt;\n\n&lt;p&gt;These containers can be used as types of fields of DTO:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;json_dto/pub.hpp&amp;gt;\n\n#include &amp;lt;deque&amp;gt;\n#include &amp;lt;set&amp;gt;\n#include &amp;lt;map&amp;gt;\n\nstruct my_message {\n    std::deque&amp;lt;int&amp;gt; ids_;\n    std::set&amp;lt;std::string&amp;gt; tags_;\n    std::map&amp;lt;std::string, some_another_type&amp;gt; props_;\n    ...\n    template&amp;lt;typename Json_Io&amp;gt;\n    void json_io(Json_Io &amp;amp; io) {\n        io &amp;amp; json_dto::mandatory(&amp;quot;ids&amp;quot;, ids_)\n            &amp;amp; json_dto::mandatory(&amp;quot;tags&amp;quot;, tags_)\n            &amp;amp; json_dto::mandatory(&amp;quot;properties&amp;quot;, props_)\n            ...\n            ;\n    }\n};   \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, these containers are supported by json_dto::from_json() and json_dto::to_json() functions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;auto messages = json_dto::from_json&amp;lt; std::forward_list&amp;lt;my_message&amp;gt; &amp;gt;(...);\n...\nauto json = json_dto::to_json(messages);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note. Containers like &lt;code&gt;std::multiset&lt;/code&gt;, &lt;code&gt;std::unordered_multiset&lt;/code&gt;, &lt;code&gt;std::multimap&lt;/code&gt;, &lt;code&gt;std::unordered_multimap&lt;/code&gt; are also supported. But json_dto doesn&amp;#39;t control duplicated values/keys. We rely on RapidJSON behavior here.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;std::array&lt;/code&gt; is not supported yet. It&amp;#39;s because we see several approaches to deal with a different number of values in JSON-input and not decided yet what approach is the best. So if you want to have the support for &lt;code&gt;std::array&lt;/code&gt; in json_dto please open &lt;a href=\"https://bitbucket.org/sobjectizerteam/json_dto-0.2/issues\"&gt;an issue&lt;/a&gt; and we&amp;#39;ll discuss it.&lt;/p&gt;\n\n&lt;p&gt;The main repo of json_dto is on &lt;a href=\"https://bitbucket.org/sobjectizerteam/json_dto-0.2\"&gt;BitBucket&lt;/a&gt;. But there is also &lt;a href=\"https://github.com/Stiffstream/json_dto\"&gt;a GitHub-mirror&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;PS. Just a few words about the comparison with famous nlohmann::json library. If you don&amp;#39;t use RapidJSON and just want to handle JSON in your C++ code then you can simply get nlohmann::json and use it. But if you already have RapidJSON in your project and want to simplify your work with complex C++ structs/classes... Or if you want to use RapidJSON because of its speed then json_dto can help you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6f9lf", "is_robot_indexable": true, "report_reasons": null, "author": "eao197", "num_crossposts": 0, "num_comments": 0, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6f9lf/json_dto028_an_update_for_easy_to_use_wrapper/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b6f9lf/json_dto028_an_update_for_easy_to_use_wrapper/", "subreddit_subscribers": 81948, "created_utc": 1553753781.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Suppose you're going to build your own company and that you can decide  everything about your future codebase.\n\nSuppose also that you have near deadlines,  that you would like to test everything,  and that you will write many many lines of code shared among many colleagues. How would you manage the complexity of your future projects? how would you set the development direction of your company?\n\nI believe that all the code you write should be written into library form and little, almost anything, should go into the application code. Most of the application X code can go into myXlibrary or in configuration files.\n\nAnother thing I prefer is to to have many small libraries with few dependencies instead of big libraries with a lot of dependencies (especially external ones).\n\nAll the classes, functions and function members should be as small as possible.\n\nLast but not least, in contrast to cpp core guidelines ( if I recall correctly), I prefer separate classes in different small headers, instead of putting everything into a single one.\n\nHow do you manage complexity?  what do you think about my ideas, feel free to (try) to crash them or hopefully share them!", "author_fullname": "t2_3b4rs4h3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing (almost) everything as library component", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b65n0p", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 40, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 40, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553700281.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Suppose you&amp;#39;re going to build your own company and that you can decide  everything about your future codebase.&lt;/p&gt;\n\n&lt;p&gt;Suppose also that you have near deadlines,  that you would like to test everything,  and that you will write many many lines of code shared among many colleagues. How would you manage the complexity of your future projects? how would you set the development direction of your company?&lt;/p&gt;\n\n&lt;p&gt;I believe that all the code you write should be written into library form and little, almost anything, should go into the application code. Most of the application X code can go into myXlibrary or in configuration files.&lt;/p&gt;\n\n&lt;p&gt;Another thing I prefer is to to have many small libraries with few dependencies instead of big libraries with a lot of dependencies (especially external ones).&lt;/p&gt;\n\n&lt;p&gt;All the classes, functions and function members should be as small as possible.&lt;/p&gt;\n\n&lt;p&gt;Last but not least, in contrast to cpp core guidelines ( if I recall correctly), I prefer separate classes in different small headers, instead of putting everything into a single one.&lt;/p&gt;\n\n&lt;p&gt;How do you manage complexity?  what do you think about my ideas, feel free to (try) to crash them or hopefully share them!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b65n0p", "is_robot_indexable": true, "report_reasons": null, "author": "geiunirus", "num_crossposts": 0, "num_comments": 47, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b65n0p/writing_almost_everything_as_library_component/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b65n0p/writing_almost_everything_as_library_component/", "subreddit_subscribers": 81948, "created_utc": 1553700281.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Hi, everyone.\n\nI'm making this thread to show my portfolio website.  I'm still learning, as there a lot of things I don't know because of which I want to continue learning, but at the same time I also want to find some freelance work so I can gain experience and learn from working as well.  I've given a link to my website in my Upwork profile and there's a repository to it on my [GitHub page](https://github.com/DragonOsman) since I'm hosting it on GitHub Pages.  \n\nURL is https://dragonosman.github.io/ .  I'd like to somehow promote it so that more people can find it, including those who hire developers or programmers.  I've also tried to improve its SEO rating, but it seems like that area still needs work.  Some help on that would be appreciated too.\n\nThe first project on the portfolio page is a C++ web server application I made.  It uses Boost.Asio and Boost.Beast for the networking and HTTP/S functionality respectively, as well as Nlohmann.JSON and Jinja2Cpp.  It's a currency converter application that uses a Google Map as its GUI.  I set up port forwarding on my router so that I could host that app on my own computer, but that also means I won't always be running it.  You can check in its description on the My Work page of my portfolio to see if it's running or not.\n\nI created the portfolio site by following the video tutorial series done by Brad Traversy on how to create a responsive portfolio website.  ", "author_fullname": "t2_v9bb4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Showing My Programmer's/Developer's Portfolio Website", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6itrx", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553779908.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, everyone.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m making this thread to show my portfolio website.  I&amp;#39;m still learning, as there a lot of things I don&amp;#39;t know because of which I want to continue learning, but at the same time I also want to find some freelance work so I can gain experience and learn from working as well.  I&amp;#39;ve given a link to my website in my Upwork profile and there&amp;#39;s a repository to it on my &lt;a href=\"https://github.com/DragonOsman\"&gt;GitHub page&lt;/a&gt; since I&amp;#39;m hosting it on GitHub Pages.  &lt;/p&gt;\n\n&lt;p&gt;URL is &lt;a href=\"https://dragonosman.github.io/\"&gt;https://dragonosman.github.io/&lt;/a&gt; .  I&amp;#39;d like to somehow promote it so that more people can find it, including those who hire developers or programmers.  I&amp;#39;ve also tried to improve its SEO rating, but it seems like that area still needs work.  Some help on that would be appreciated too.&lt;/p&gt;\n\n&lt;p&gt;The first project on the portfolio page is a C++ web server application I made.  It uses Boost.Asio and Boost.Beast for the networking and HTTP/S functionality respectively, as well as Nlohmann.JSON and Jinja2Cpp.  It&amp;#39;s a currency converter application that uses a Google Map as its GUI.  I set up port forwarding on my router so that I could host that app on my own computer, but that also means I won&amp;#39;t always be running it.  You can check in its description on the My Work page of my portfolio to see if it&amp;#39;s running or not.&lt;/p&gt;\n\n&lt;p&gt;I created the portfolio site by following the video tutorial series done by Brad Traversy on how to create a responsive portfolio website.  &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6itrx", "is_robot_indexable": true, "report_reasons": null, "author": "DragonOsman", "num_crossposts": 0, "num_comments": 3, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6itrx/showing_my_programmersdevelopers_portfolio_website/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b6itrx/showing_my_programmersdevelopers_portfolio_website/", "subreddit_subscribers": 81948, "created_utc": 1553779908.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "When I first started my academic career I learned C with standard out. Where raw arrays were taught instead of `std::vector&lt;T&gt;`, raw pointers instead of smart pointers (though I appreciate the raw pointer knowledge that I was given), character arrays instead of `std::string`. C++ is a very powerful language with lots of amazing tools in the standard template library.\n\n&amp;#x200B;\n\nWhy is there a lack of modern C++ developers coming out of the education system?", "author_fullname": "t2_fo8fw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why are we still teaching C with standard out instead of modern C++?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6axrm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553726488.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;When I first started my academic career I learned C with standard out. Where raw arrays were taught instead of &lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt;, raw pointers instead of smart pointers (though I appreciate the raw pointer knowledge that I was given), character arrays instead of &lt;code&gt;std::string&lt;/code&gt;. C++ is a very powerful language with lots of amazing tools in the standard template library.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Why is there a lack of modern C++ developers coming out of the education system?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6axrm", "is_robot_indexable": true, "report_reasons": null, "author": "rlramirez12", "num_crossposts": 0, "num_comments": 41, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6axrm/why_are_we_still_teaching_c_with_standard_out/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b6axrm/why_are_we_still_teaching_c_with_standard_out/", "subreddit_subscribers": 81948, "created_utc": 1553726488.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "So I recently had to join a team writing C++. I have been a long time kernel developer (using C), and about a year ago I started to use Rust for everything outside of my day job. I've also been writing quite a bit of Go and Nim, which I both really enjoy.\n\n&amp;#x200B;\n\nMost of my time writing C++ is spent using a framework that is very object oriented. It heavily uses inheritance, async, and templates to monomorphize the base class's implementation. My issue is that I have found, in order of impact, inheritance, operator overloading, and visibility to be a net negative on my moral. Here's a quick summary why:\n\n&amp;#x200B;\n\n1. Inheritance that is only used to implement a purely virtual interface with no data is fine. When I am inheriting data and implementations, however, I pretty much have to crack open the parent class's implementation. In short, it's basically a method of copy and pasting code without the locality; it's not an abstraction that lets me reason about just behavior. There is also always the question of whether it's better to use inheritance or use composition/a library for would be static methods.\n2. Operator overloading via class methods is just weird in terms of how concrete it feels compared to traits. You have a limited selection of magic names that are baked into the class rather than having the class implement a set of interfaces. This also makes it impossible to constrain type parameters, as far as I am aware, to just focus on writing to behavior. In that sense, this also makes it a weak/not an abstraction just like parent classes.\n3. Visibility is fine up until you get to friendship, protected, and just dealing with inheritance. I guess I just really don't like inheritance because it's trying to do so many things but really fails to add anything of use outside of what I'm getting with traits/interfaces and type parameters.\n\n&amp;#x200B;\n\nMy question to the C++ community is, how can I write my C++ code around these issues, am I missing some frame of mind that makes these concepts seem more appealing, can I write in a subset of the language without these features and still interface with them, how do you all feel about these features.\n\n&amp;#x200B;\n\nAlso, is there a good reference document for lvalue/rvalue and ownership in C++? Potentially for someone who already knows Rust?\n\n&amp;#x200B;\n\nEdit:\n\n&amp;#x200B;\n\nAlso, I keep hearing about \"modern\" C++. Is there a guide or book on how to code in \"modern\" C++? The resources I have found so far only go over features, but not style.", "author_fullname": "t2_43pyjr6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing C++ from a Rust developers perspective", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5wkw7", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 71, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "thumbnail": "", "edited": 1553641132.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553640833.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I recently had to join a team writing C++. I have been a long time kernel developer (using C), and about a year ago I started to use Rust for everything outside of my day job. I&amp;#39;ve also been writing quite a bit of Go and Nim, which I both really enjoy.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Most of my time writing C++ is spent using a framework that is very object oriented. It heavily uses inheritance, async, and templates to monomorphize the base class&amp;#39;s implementation. My issue is that I have found, in order of impact, inheritance, operator overloading, and visibility to be a net negative on my moral. Here&amp;#39;s a quick summary why:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Inheritance that is only used to implement a purely virtual interface with no data is fine. When I am inheriting data and implementations, however, I pretty much have to crack open the parent class&amp;#39;s implementation. In short, it&amp;#39;s basically a method of copy and pasting code without the locality; it&amp;#39;s not an abstraction that lets me reason about just behavior. There is also always the question of whether it&amp;#39;s better to use inheritance or use composition/a library for would be static methods.&lt;/li&gt;\n&lt;li&gt;Operator overloading via class methods is just weird in terms of how concrete it feels compared to traits. You have a limited selection of magic names that are baked into the class rather than having the class implement a set of interfaces. This also makes it impossible to constrain type parameters, as far as I am aware, to just focus on writing to behavior. In that sense, this also makes it a weak/not an abstraction just like parent classes.&lt;/li&gt;\n&lt;li&gt;Visibility is fine up until you get to friendship, protected, and just dealing with inheritance. I guess I just really don&amp;#39;t like inheritance because it&amp;#39;s trying to do so many things but really fails to add anything of use outside of what I&amp;#39;m getting with traits/interfaces and type parameters.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;My question to the C++ community is, how can I write my C++ code around these issues, am I missing some frame of mind that makes these concepts seem more appealing, can I write in a subset of the language without these features and still interface with them, how do you all feel about these features.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Also, is there a good reference document for lvalue/rvalue and ownership in C++? Potentially for someone who already knows Rust?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Also, I keep hearing about &amp;quot;modern&amp;quot; C++. Is there a guide or book on how to code in &amp;quot;modern&amp;quot; C++? The resources I have found so far only go over features, but not style.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5wkw7", "is_robot_indexable": true, "report_reasons": null, "author": "SEgopher", "num_crossposts": 0, "num_comments": 85, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b5wkw7/writing_c_from_a_rust_developers_perspective/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b5wkw7/writing_c_from_a_rust_developers_perspective/", "subreddit_subscribers": 81948, "created_utc": 1553640833.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_2zr9pjk0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++11: What is possible to do with moved-from object?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b61c74", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553670794.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b61c74", "is_robot_indexable": true, "report_reasons": null, "author": "w3docs", "num_crossposts": 0, "num_comments": 21, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b61c74/c11_what_is_possible_to_do_with_movedfrom_object/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b61c74/c11_what_is_possible_to_do_with_movedfrom_object/", "subreddit_subscribers": 81948, "created_utc": 1553670794.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I develop in C++ and am relatively familiar with that language.\n\nUnfortunately I need to use private Instagram API which are only available in different languages like python, php, nodejs...\n\nCan I use one of these API with C++ either anyway? Could you tell me how?\n\n&amp;#x200B;\n\nI do know the rest apis from Instagram but it seems to me that both of them do not contain useful features.\n\n [https://www.instagram.com/developer/endpoints/](https://www.instagram.com/developer/endpoints/)  \\- almost no endpoints\n\n [https://developers.facebook.com/docs/instagram-api/?locale=en](https://developers.facebook.com/docs/instagram-api/?locale=en)  \\- only usable for business accounts\n\n&amp;#x200B;\n\nThanks in advance\n\nSpixmaster", "author_fullname": "t2_e5y25", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Use API in a different language", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b6a0wa", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553722039.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I develop in C++ and am relatively familiar with that language.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately I need to use private Instagram API which are only available in different languages like python, php, nodejs...&lt;/p&gt;\n\n&lt;p&gt;Can I use one of these API with C++ either anyway? Could you tell me how?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I do know the rest apis from Instagram but it seems to me that both of them do not contain useful features.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.instagram.com/developer/endpoints/\"&gt;https://www.instagram.com/developer/endpoints/&lt;/a&gt;  - almost no endpoints&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://developers.facebook.com/docs/instagram-api/?locale=en\"&gt;https://developers.facebook.com/docs/instagram-api/?locale=en&lt;/a&gt;  - only usable for business accounts&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance&lt;/p&gt;\n\n&lt;p&gt;Spixmaster&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b6a0wa", "is_robot_indexable": true, "report_reasons": null, "author": "Spixmaster", "num_crossposts": 0, "num_comments": 4, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b6a0wa/use_api_in_a_different_language/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b6a0wa/use_api_in_a_different_language/", "subreddit_subscribers": 81948, "created_utc": 1553722039.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "As std-proposals continues to be unfit for purpose, I thought I'd share here an early draft Cologne WG21 paper I just sent to SG12 for early comment. It proposes an enhanced memory and object model for C++ and C based around\nimplementing a subset of https://wg21.link/P1434 \"Discussing pointer provenance\" to make\nmuch more rigorous the modification of memory, and adding two new core\noperations to objects:\n\n1. Detachment, the reinterpretation of a live object into an array of\nbytes representing that object.\n\n2. Attachment, the reinterpretation of a previously detached object\nrepresentation into a live object.\n\nIt is believed that these changes are sufficient to implement memory\nshared between concurrent processes, memory mapped in from another\ndevice by DMA, process bootstrap from a database of shared binary\nModules, and the elemental operations for implementing zero-copy\nserialisation and deserialisation.\n\nOne also gains object relocation in memory, and substantially enhanced\ndefault move implementations which can use CPU registers for object\ntransport.\n\nhttps://dedi5.nedprod.com/static/files/other/Dxxxx%20draft%202%20-%20Enhanced%20C%2B%2B%20memory%20and%20object%20model.pdf\n\nFeedback is welcome, though do be aware that this is a very early draft which is intentionally both over-ambitious in feature set, and horribly under-specified in terms of wording, sequencing and so on (i.e. everything else). *Really* big changes to C and C++ like this proposal tend to start out huge but skimpy on detail, and get pared down relentlessly into something extremely conservative, assuming there is any chance of achieving consensus at all with such a major change.\n\nIn case some on /r/cpp aren't aware, I cannot find any papers in the WG21 mailing archive seriously proposing support for shared memory (Ion and myself previously proposed hand waving \"it's magic\" support), let alone any of the other stuff like C++ actually knowing what a memory page is, or a C++ program being executable more than once, or the possibility that more than one C++ program can execute. The closest I believe was a 2007 paper by Herb which detailed the then MSVC memory model on x86 CPUs, and even that fell far short of the scope of these proposed changes. Still, I'd love to hear about anything I've missed, I'm supposed to be giving a talk on this stuff at ACCU 2019 in two weeks time. I *quite literally* have little to zero knowledge about this topic.\n\nEnjoy!", "author_fullname": "t2_n2t9a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Draft 2 of WG21 Enhanced C/C++ memory and object model paper", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5p10k", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 89, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": "7bf857c8-4dcc-11e6-b84d-0e5fbba92363", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 89, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553602926.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As std-proposals continues to be unfit for purpose, I thought I&amp;#39;d share here an early draft Cologne WG21 paper I just sent to SG12 for early comment. It proposes an enhanced memory and object model for C++ and C based around\nimplementing a subset of &lt;a href=\"https://wg21.link/P1434\"&gt;https://wg21.link/P1434&lt;/a&gt; &amp;quot;Discussing pointer provenance&amp;quot; to make\nmuch more rigorous the modification of memory, and adding two new core\noperations to objects:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Detachment, the reinterpretation of a live object into an array of\nbytes representing that object.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Attachment, the reinterpretation of a previously detached object\nrepresentation into a live object.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;It is believed that these changes are sufficient to implement memory\nshared between concurrent processes, memory mapped in from another\ndevice by DMA, process bootstrap from a database of shared binary\nModules, and the elemental operations for implementing zero-copy\nserialisation and deserialisation.&lt;/p&gt;\n\n&lt;p&gt;One also gains object relocation in memory, and substantially enhanced\ndefault move implementations which can use CPU registers for object\ntransport.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://dedi5.nedprod.com/static/files/other/Dxxxx%20draft%202%20-%20Enhanced%20C%2B%2B%20memory%20and%20object%20model.pdf\"&gt;https://dedi5.nedprod.com/static/files/other/Dxxxx%20draft%202%20-%20Enhanced%20C%2B%2B%20memory%20and%20object%20model.pdf&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Feedback is welcome, though do be aware that this is a very early draft which is intentionally both over-ambitious in feature set, and horribly under-specified in terms of wording, sequencing and so on (i.e. everything else). &lt;em&gt;Really&lt;/em&gt; big changes to C and C++ like this proposal tend to start out huge but skimpy on detail, and get pared down relentlessly into something extremely conservative, assuming there is any chance of achieving consensus at all with such a major change.&lt;/p&gt;\n\n&lt;p&gt;In case some on &lt;a href=\"/r/cpp\"&gt;/r/cpp&lt;/a&gt; aren&amp;#39;t aware, I cannot find any papers in the WG21 mailing archive seriously proposing support for shared memory (Ion and myself previously proposed hand waving &amp;quot;it&amp;#39;s magic&amp;quot; support), let alone any of the other stuff like C++ actually knowing what a memory page is, or a C++ program being executable more than once, or the possibility that more than one C++ program can execute. The closest I believe was a 2007 paper by Herb which detailed the then MSVC memory model on x86 CPUs, and even that fell far short of the scope of these proposed changes. Still, I&amp;#39;d love to hear about anything I&amp;#39;ve missed, I&amp;#39;m supposed to be giving a talk on this stuff at ACCU 2019 in two weeks time. I &lt;em&gt;quite literally&lt;/em&gt; have little to zero knowledge about this topic.&lt;/p&gt;\n\n&lt;p&gt;Enjoy!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "LLFIO &amp; Outcome author | Boost GSoC subadmin", "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5p10k", "is_robot_indexable": true, "report_reasons": null, "author": "14ned", "num_crossposts": 0, "num_comments": 20, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/b5p10k/draft_2_of_wg21_enhanced_cc_memory_and_object/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b5p10k/draft_2_of_wg21_enhanced_cc_memory_and_object/", "subreddit_subscribers": 81948, "created_utc": 1553602926.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_mkwxe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++Now 2019 Schedule: over 50 presentations in 3 tracks", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": "cppnow", "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5q7h5", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 54, "domain": "cppnow.org", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "C++Now", "can_mod_post": false, "score": 54, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553609611.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5q7h5", "is_robot_indexable": true, "report_reasons": null, "author": "foonathan", "num_crossposts": 0, "num_comments": 4, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b5q7h5/cnow_2019_schedule_over_50_presentations_in_3/", "whitelist_status": "all_ads", "stickied": false, "url": "http://cppnow.org/schedule/", "subreddit_subscribers": 81948, "created_utc": 1553609611.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_11pe86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The amortized cost of vector insert is 3", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5omnv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 36, "domain": "mortoray.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 36, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553600379.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5omnv", "is_robot_indexable": true, "report_reasons": null, "author": "vormestrand", "num_crossposts": 0, "num_comments": 48, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b5omnv/the_amortized_cost_of_vector_insert_is_3/", "whitelist_status": "all_ads", "stickied": false, "url": "https://mortoray.com/2019/03/26/the-amortized-cost-of-vector-insert-is-3/", "subreddit_subscribers": 81948, "created_utc": 1553600379.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_qg459", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C-style callbacks and lambda functions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5q7bu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "domain": "vorbrodt.blog", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553609593.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5q7bu", "is_robot_indexable": true, "report_reasons": null, "author": "rafal_rr", "num_crossposts": 0, "num_comments": 22, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b5q7bu/cstyle_callbacks_and_lambda_functions/", "whitelist_status": "all_ads", "stickied": false, "url": "https://vorbrodt.blog/2019/03/24/c-style-callbacks-and-lambda-functions", "subreddit_subscribers": 81948, "created_utc": 1553609593.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "you cant install it! gotta do it without installing it\n\n&amp;#x200B;\n\nhas anyone ever used that library? I just love the documentation there geniuses", "author_fullname": "t2_lu6nc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Has anyone EVER built and linked the google-benchmark library successfully in windows?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b678yp", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553708654.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;you cant install it! gotta do it without installing it&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;has anyone ever used that library? I just love the documentation there geniuses&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b678yp", "is_robot_indexable": true, "report_reasons": null, "author": "TheNewGuy555", "num_crossposts": 0, "num_comments": 24, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b678yp/has_anyone_ever_built_and_linked_the/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b678yp/has_anyone_ever_built_and_linked_the/", "subreddit_subscribers": 81948, "created_utc": 1553708654.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I've been using C++ for about 3 years now, and I only just realized std::vector has no bounds checking. I can create a vector v of 10 elements, call element v[5321], and the compiler will tell me *nothing*. Has it always been like this? I swear I used to get error messages for this kind of thing. I just had to share this because I'm so confused.\n\n**Edit:** I remembered incorrectly. It wasn't the compiler that used to warn me, but rather the segfault at runtime upon access of an out-of-range element. I guess I'm just surprised that the program may not actually segfault when you try to access an out-of-range element. It could just keep running, and you may think the program is correct when it really isn't. That is what really spooks me.", "author_fullname": "t2_2i8qmtqb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I just realized vector has no bounds checking", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b65k70", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "self.cpp", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": 1553724067.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1553699746.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using C++ for about 3 years now, and I only just realized std::vector has no bounds checking. I can create a vector v of 10 elements, call element v[5321], and the compiler will tell me &lt;em&gt;nothing&lt;/em&gt;. Has it always been like this? I swear I used to get error messages for this kind of thing. I just had to share this because I&amp;#39;m so confused.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I remembered incorrectly. It wasn&amp;#39;t the compiler that used to warn me, but rather the segfault at runtime upon access of an out-of-range element. I guess I&amp;#39;m just surprised that the program may not actually segfault when you try to access an out-of-range element. It could just keep running, and you may think the program is correct when it really isn&amp;#39;t. That is what really spooks me.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b65k70", "is_robot_indexable": true, "report_reasons": null, "author": "BasicBlazar", "num_crossposts": 0, "num_comments": 27, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b65k70/i_just_realized_vector_has_no_bounds_checking/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/b65k70/i_just_realized_vector_has_no_bounds_checking/", "subreddit_subscribers": 81948, "created_utc": 1553699746.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_3xdbh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Bootstrapping a vcpkg-based cmake project in Visual Studio", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b5r79e", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "domain": "cpptruths.blogspot.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553614696.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b5r79e", "is_robot_indexable": true, "report_reasons": null, "author": "sutambe", "num_crossposts": 0, "num_comments": 8, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b5r79e/bootstrapping_a_vcpkgbased_cmake_project_in/", "whitelist_status": "all_ads", "stickied": false, "url": "http://cpptruths.blogspot.com/2019/03/bootstrapping-vcpkg-based-cmake-project.html", "subreddit_subscribers": 81948, "created_utc": 1553614696.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_755w5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New C++ library for extending the debugger data model (WinDbg)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b57v1z", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 81, "domain": "blogs.msdn.microsoft.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 81, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553501484.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b57v1z", "is_robot_indexable": true, "report_reasons": null, "author": "pjmlp", "num_crossposts": 0, "num_comments": 0, "send_replies": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b57v1z/new_c_library_for_extending_the_debugger_data/", "whitelist_status": "all_ads", "stickied": false, "url": "https://blogs.msdn.microsoft.com/windbg/2019/03/22/new-c-library-for-extending-the-debugger-data-model/", "subreddit_subscribers": 81948, "created_utc": 1553501484.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_11pe86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "autotidy: Speedier handling of clang-tidy checking", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b59226", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "domain": "github.com", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553510563.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b59226", "is_robot_indexable": true, "report_reasons": null, "author": "vormestrand", "num_crossposts": 0, "num_comments": 1, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b59226/autotidy_speedier_handling_of_clangtidy_checking/", "whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/sasq64/autotidy#autotidy", "subreddit_subscribers": 81948, "created_utc": 1553510563.0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_11pe86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Get the element index when iterating with an indexed_view", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": "all_ads", "hide_score": false, "name": "t3_b581yy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "domain": "justsoftwaresolutions.co.uk", "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1553503206.0, "link_flair_type": "text", "wls": 6, "banned_by": null, "author_flair_type": "text", "contest_mode": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b581yy", "is_robot_indexable": true, "report_reasons": null, "author": "vormestrand", "num_crossposts": 0, "num_comments": 10, "send_replies": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/b581yy/get_the_element_index_when_iterating_with_an/", "whitelist_status": "all_ads", "stickied": false, "url": "https://www.justsoftwaresolutions.co.uk/cplusplus/indexed_view.html", "subreddit_subscribers": 81948, "created_utc": 1553503206.0, "media": null, "is_video": false}}], "after": "t3_b581yy", "before": null}}